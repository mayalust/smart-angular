<config injector=""
></config>
<template>
  <div>
    <div id="cl" class="row">
      <div ng-repeat="op in ngModel.children"
           ng-class="'col-xs-' + op.col"
           class="column">
        <span ng-bind="calu(op.col)"></span>
      </div>
    </div>
    <div class="free-board-left-rule" draggable="false">
    </div>
  </div>
</template>
<script type="text/javascript">
  export default function(){
    return {
      scope : {
        ngModel : "=",
      },
      require : "ngModel",
      link(scope, element, attr, ngModel){
        let bars = [],
          el = element[0].children[1];
        scope.$on("$destroy", (e) => {
          console.log("destroyed:[row]!!");
        });
        scope.calu = function(val){
          return parseInt(val / 12 * 100) + '%';
        }
        function createBar(inx){
          let bar = document.createElement("div"), curSel = null;
          bar.setAttribute("class", "bar");
          bar.style.left = (inx - 0 + 1) / 12 * 100 + "%";
          bar.onmousedown = onmousedown
          function winmouseup(){
            el.setAttribute("class", "free-board-left-rule");
            curSel && curSel.setAttribute("class", "bar active");
            bar.onmousedown = onmousedown;
            for(let i = 0; i < 11; i++){
              bars[i].onmouseover = null;
              bars[i].onmouseout = null;
            }
            curSel = null;
          }
          function onmousedown(){
            let cls = bar.getAttribute("class"), mousedown_self = this;
            el.setAttribute("class", "free-board-left-rule mousedown");
            if(cls.indexOf("active") != -1){
              curSel = this;
              curSel && curSel.setAttribute("class", "bar");
            }
            render.call(this);
            function render(){
              let cols = [], stack = 0;
              curSel = this;
              for(var i = 0; i < bars.length; i++){
                if(bars[i].getAttribute("class").indexOf("active") != -1
                  || this === bars[i]){
                  cols.push(i - stack + 1);
                  stack = i + 1;
                }
              }
              cols.push(12 - stack);
              ngModel.$viewValue.children = cols.map((val) => {
                return {
                  type : "col",
                  col : val,
                  children : []
                }
              });
              ngModel.$setViewValue(ngModel.$viewValue);
            }
            for(let i = 0; i < 11; i++){
              bars[i].onmouseover = function(){
                render.call(this);
              }
            }
            window.onmouseup = winmouseup
          }
          return bar;
        }
        for(let i = 0; i < 11; i++){
          bars[i] = createBar(i);
          el.appendChild(bars[i]);
        }
        ngModel.$formatters.push((val) => {
          var inx = 0;
          for(var i = 0; i<val.children.length; i++){
            val.children[i].inx = inx += val.children[i].col;
          };
          return val;
        });
        ngModel.$parsers.push((val) => {
          for(var i = 0; i<val.children.length; i++){
            delete val.children[i].inx;
          };
          return val;
        })
        ngModel.$render = function(){
          for(var i = 0; i < ngModel.$viewValue.children.length - 1; i++){
            bars[ngModel.$viewValue.children[i].inx - 1].setAttribute("class", "bar active");
          }
        }
      }
    }
  }
</script>
<style type="less">
  #cl {
    margin : 5px;
    padding : 0;
    width : auto;
    background-color : #fff;
    border : 1px solid #ccc;
    border-left : 0;
    .column {
      padding : 0;
      margin : 0;
      border-left : 1px solid #aaa;
      height : 20px;
      text-align : center;
    }
  }
  .wrap {
    padding : 5px;
  }
</style>